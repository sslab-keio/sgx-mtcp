/*
 * Copyright 2017 Imperial College London
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

enclave {
	from "sgx_tstdc.edl" import *;
    include "enclave_interface_types.h"

	trusted {
        /* thread ecalls */
        public void ecall_start_thread([user_check] void *start_routine, [user_check] void *arg);
        public int ecall_rte_eal_remote_launch_call_callback([user_check] void *f, [user_check] void* arg);

        /* For applications */
        public int ecall_main_wrapper(int argc, [user_check] char **argv);
	};

	untrusted {
		/*
		 * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
		 * ocall_println_string - same as ocall_print_string but with a new line
		 *  [in]: copy the string buffer to App outside.
		 *  [string]: specifies 'str' is a NULL terminated buffer.
		 */
		void ocall_print_string([in, string] const char* str);
		void ocall_println_string([in, string] const char* str);

		void ocall_exit(int s);

        void* ocall_malloc(size_t size);
		void* ocall_realloc([user_check] void* ptr, size_t size);
        void* ocall_calloc(size_t nmemb, size_t size);
        void ocall_free([user_check] void* ptr);

        void* ocall_fopen([user_check] const char *path, [user_check] const char *mode);
        char *ocall_fgets([out, size=size] char *s, int size, [user_check] void *stream);
        /* 2 ocalls to fwrite, depending on if ptr is allocated inside the enclave (fwrite_copy) or outside (fwrite) */
		size_t ocall_fwrite_copy([in, size=size, count=nmemb] const void *ptr, size_t size, size_t nmemb, [user_check] void *stream);
        size_t ocall_fwrite([user_check] const void *ptr, size_t size, size_t nmemb, [user_check] void *stream);
        int ocall_fclose([user_check] void* fp);
        int ocall_fflush([user_check] void* stream);

        int ocall_open([in, string] const char *filename, int flags, mode_t mode) propagate_errno;
        int ocall_open64([in, string] const char *filename, int flags, mode_t mode) propagate_errno;
        ssize_t ocall_read(int fd, [out, size=count] void *buf, size_t count) propagate_errno;
        ssize_t ocall_write(int fd, [in, size=count] const void *buf, size_t count) propagate_errno;
        int ocall_close(int fd);
        int ocall_pipe([out] int pipefd[2]);

        int ocall_ioctl1(int fd, unsigned long request, size_t len, [in, out, size=len] void* ptr);
        void* ocall_signal(int signum, [user_check] void* handler);
        long ocall_syscall1(long number);
        long ocall_sysconf(int name);
        void ocall_perror([in, string] const char *s);

        int ocall_clock_gettime(clockid_t clk_id, [out] struct timespec *tp);
        int ocall_gettimeofday([out] struct timeval *tv, [out] struct timezone *tz);
        int ocall_usleep(useconds_t usec);

        int ocall_sched_getcpu(void);
        void ocall_set_optind(int o);
        int ocall_mlockall(int flags);

        in_addr_t ocall_inet_addr([in, string] const char *cp);
        int ocall_socket(int domain, int type, int protocol);
        char *ocall_inet_ntoa(struct in_addr in);
        int ocall_getifaddrs([out] struct ifaddrs **ifap);
        void ocall_freeifaddrs([user_check] struct ifaddrs *ifa);

        uid_t ocall_getuid(void);
        uid_t ocall_geteuid(void);
        pid_t ocall_getpid(void);

        int ocall_posix_memalign_on_pagesize([out] void **memptr, size_t size);
        int ocall_mlock([user_check] const void *addr, size_t len);

        int ocall_getopt(int argc, [user_check] char **argv, [in, string] const char *optstring);
        int ocall_getopt_long(int argc, [user_check] char **argv, [in, string] const char *optstring,
                        [in] const struct option *longopts, [in] int *longindex);
        char* ocall_getoptarg(void);

        int ocall_sched_yield(void);

        /* thread ocalls */
        int ocall_pthread_create([user_check] thread_t * thread, [user_check] const thread_attr_t * attr, [user_check] void *start_routine, [user_check] void *arg);
        void ocall_pthread_exit([user_check] void *ret);
        int ocall_pthread_join(thread_t thread, [user_check] void **thread_return);
        int ocall_pthread_setspecific(thread_key_t key, [user_check] const void *ptr);
        void* ocall_pthread_getspecific(thread_key_t key);
        int ocall_pthread_key_create([user_check] thread_key_t *key, [user_check] void *destr_function);
        int ocall_sem_init([user_check] sem_t *sem, int pshared, unsigned int value);
        int ocall_sem_destroy([user_check] sem_t *sem);
        int ocall_sem_wait([user_check] sem_t *sem);
        int ocall_sem_post([user_check] sem_t *sem);


        /* DPDK ocalls */
        void ocall_set_lcore_config(int master, int ret, enum rte_lcore_state_t state);
        int ocall_rte_eal_init(int argc, [user_check] char **argv);
        int ocall_rte_eal_remote_launch([user_check] void* f, [user_check] void *arg, unsigned slave_id);
        uint16_t ocall_rte_eth_dev_count_avail(void);
        void* ocall_rte_calloc_socket([in, string] const char *type, size_t num, size_t size, unsigned align, int socket);

        void ocall_rte_free([user_check] void *addr);

        void* ocall_rte_malloc_socket([in, string] const char *type, size_t size, unsigned int align, int socket_arg);
        void* ocall_rte_ring_create([in, string] const char *name, unsigned count, int socket_id, unsigned flags);

        void ocall_rte_eth_macaddr_get(uint16_t port_id, [user_check] struct ether_addr *mac_addr);
        enum rte_proc_type_t ocall_eal_proc_type_detect(void);
        int ocall_rte_thread_set_affinity([in] cpu_set_t *cpusetp);
        unsigned ocall_rte_lcore_id(void);
        unsigned ocall_rte_get_master_lcore(void);
        unsigned ocall_rte_socket_id(void);
        uint64_t ocall_rte_rdtsc(void);
        int ocall_rte_lcore_index(int lcore_id);

        void ocall_dpdk_load_module(struct mtcp_config conf, int num_devices_attached, [in, count=MAX_DEVICES] int* devices_attached);
        void ocall_dpdk_init_handle([in, out] struct mtcp_thread_context *ctxt);
        int ocall_dpdk_send_pkts([in] struct mtcp_thread_context *ctxt, int ifidx);
        int ocall_dpdk_send_merged_pkts([in] struct mtcp_thread_context *ctxt, int ifidx);
        int32_t ocall_dpdk_recv_pkts([in] struct mtcp_thread_context *ctxt, int ifidx);
        void ocall_dpdk_get_dev_info(int nif, [out] char** driver_name, [out] uint64_t* tx_offload_capa, [out] uint64_t* rx_offload_capa);
        int32_t ocall_dpdk_recv_pkts_and_gettimeofday([in] struct mtcp_thread_context *ctxt, int ifidx, [out] struct timeval* cur_ts);
        int32_t ocall_dpdk_send_pkts_and_dpdk_recv_pkts_and_gettimeofday([in] struct mtcp_thread_context *ctxt, int ifidx, [out] struct timeval* cur_ts);
        int32_t ocall_dpdk_send_merged_pkts_and_dpdk_recv_pkts_and_gettimeofday([in] struct mtcp_thread_context *ctxt, int ifidx, [out] struct timeval* cur_ts);

        int ocall_getrlimit(int resource, [out] struct rlimit *rlim);
        int ocall_setrlimit(int resource, [in] const struct rlimit *rlim);
        struct passwd* ocall_getpwnam([user_check] const char *name);
        int ocall_setgroups(size_t size, [in] const gid_t *list);
        int ocall_setgid(gid_t gid);
        int ocall_setuid(uid_t uid);
        int ocall_sigignore(int sig);
        char* ocall_strdup([in] const char *s);
        int ocall_getaddrinfo([in, string] const char *node, [in, string] const char *service,
                        [in] const struct addrinfo *hints,
                        [out] struct addrinfo **res);

        // lthread
        int ocall__getpagesize(void);

        // libevent
        struct event_config * ocall_event_config_new(void);
        int ocall_event_config_set_flag([user_check] struct event_config *cfg, int flag);
        struct event_base * ocall_event_base_new_with_config([user_check] const struct event_config *cfg);
        void ocall_event_set([in, out] struct event *ev, evutil_socket_t fd, short events, [user_check] void *callback, [user_check] void *arg);
        int ocall_event_base_set([user_check] struct event_base *base, [in, out] struct event *ev);
        int ocall_event_add([in, out] struct event *ev, [in] const struct timeval *tv);
        int ocall_event_base_loop([user_check] struct event_base *base, int flags);

		  // lighttpd
		  char *ocall_setlocale(int category, [in] const char *locale);
		  time_t ocall_time([in, out] time_t *t);
		  char *ocall_getcwd([in, out, size=size] char *buf, size_t size);
		  int ocall_wrapper_stat([in, string] const char *pathname, [in, out] struct stat *statbuf);
		  int ocall_wrapper_lstat([in, string] const char *path, [in, out] struct stat *sb);
		  struct tm *ocall_localtime([in] const time_t *timep);
		  void *ocall_mmap([user_check] void *addr, size_t length, int prot, int flags, int fd, off_t offset);
		  int ocall_munmap([user_check] void *addr, size_t length);
		  gid_t ocall_getgid(void);
		  struct hostent *ocall_gethostbyname([in, string] const char *name);
		  void ocall_openlog([in, string] const char *ident, int option, int facility);
		  int ocall_fcntl(int fd, int cmd, int arg);
		  struct tm *ocall_gmtime([in] const time_t *timep);
		  off64_t ocall_lseek64(int fd, off64_t offset, int whence);
	};
};
